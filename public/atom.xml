<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jason Cluck]]></title>
  <link href="http://jcluck.herokuapp.com//atom.xml" rel="self"/>
  <link href="http://jcluck.herokuapp.com//"/>
  <updated>2013-01-31T15:17:18-05:00</updated>
  <id>http://jcluck.herokuapp.com//</id>
  <author>
    <name><![CDATA[Jason Cluck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Amazon - third interview and offer]]></title>
    <link href="http://jcluck.herokuapp.com//blog/2013/01/30/amazon-third-interview-and-offer/"/>
    <updated>2013-01-30T10:08:00-05:00</updated>
    <id>http://jcluck.herokuapp.com//blog/2013/01/30/amazon-third-interview-and-offer</id>
    <content type="html"><![CDATA[<p>I was notified a few days after the first two Amazon interviews that they wanted to have a third interview.  They had to reschedule once due to a timing conflict but I had the third interview last Thursday (1/24).  The agenda was the same as the other interviews and began with questions about a Rails project I&#8217;ve done recently.  Next was some questions about binary search trees (glad I studied those).  I was able to answer these questions and figured out the number of leaf nodes and total nodes in a complete BST of height <strong>h</strong> by writing out an example.</p>

<!--more-->


<p>The programming portion was next and I got on collabedit again.  The first question was to write a function to tell if two strings are anagrams of each other.  I knew this one! I actually reviewed the solutions the day before so I told the interviewer it was a familiar problem and he had me solve it anyways.  I mentioned three solutions:</p>

<ol>
<li><p>Sort the strings using a basic sort such as quicksort to avoid using additional space - O(nlogn) time.  If the sorted strings are the same they are anagrams.</p></li>
<li><p>Allocate an array that is the size of the total possible characters in the character set (ASCII or Unicode).  For the first string, increment the characters location in the array every time it is seen, then decrement it for the second string.  Check to see if the array is zeroed out and if so, its an anagram. This is similiar to counting sort.</p></li>
<li><p>If we constrict the requirements to only allowing unique lowercase ASCII characters it becomes more feasible to do a bitwise solution.  Using an 32-bit int, we can bit shift over by that character&#8217;s value (subtract &#8216;a&#8217; from character to get bits 0-25).  Then flip the bits back if the second string also has any of the bits from the first string.  At the end just check to see if the int is equal to 0 and the result is an anagram.</p></li>
</ol>


<p>I implemented version 2. of the anagram code with ASCII in Java and then he asked me another problem.  Given a value k, what is a good approach for returning the max k values from an unsorted array.  So if k=1 we return the max, k=2 we return the max and the second max etc.  I thought about this by starting with k=1.  It will take at least O(n) time to return just 1, but as k grows the compute time will grow rapidly.  I started thinking of data structures to use beginning with a BST (probably because it was fresh in my mind).  This would work because the elements are sorted but the tree traversals would get ugly and complicated.  I then decided on using a max-heap because it takes n time to assemble and can easily reorganize to provide the next element.</p>

<p>I asked some questions about Amazon and then the interview was over.  After much anticipation I received an offer yesterday and spoke with a recruiter about all the details.  I have already accepted so I will moving to Seattle for the summer.  The team I will be working on is called eCPS which focuses on scalability and reliable with web services.  The website has more details <a href="http://ecps.amazon.com/">here</a>.</p>

<p>Some lessons that I learned:</p>

<ul>
<li><p>Practice programming problems! Tons of these on StackOverflow, Careercup, Glassdoor etc.</p></li>
<li><p>Take Steve Yegge&#8217;s advice and warm up the day of.  Do some really common interview problems like recursive tree traversals, hash tables, and string manipulation.</p></li>
<li><p>Tell the interviewers if you&#8217;ve solved the problem before! People want honest teammates.</p></li>
<li><p>Work on programming projects in your free time.  I&#8217;m pretty sure I only got an interview because I taught myself Rails and wrote some projects with it for fun.</p></li>
</ul>


<p>Anyways, I hope this helps someone else with getting the job they want!  I&#8217;d be glad to answer any questions via email: jcluck@gwmail.gwu.edu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon Interview]]></title>
    <link href="http://jcluck.herokuapp.com//blog/2013/01/10/amazon/"/>
    <updated>2013-01-10T15:23:00-05:00</updated>
    <id>http://jcluck.herokuapp.com//blog/2013/01/10/amazon</id>
    <content type="html"><![CDATA[<p>Today I had my phone interviews with Amazon for the Software Engineering Intern position in Seattle.  This was my first &#8220;real&#8221; technical interview and consisted of two 45 minute sessions.  Both interviewers were very nice and they didn&#8217;t waste any time getting to the technical questions. It began with simple OO questions such as:</p>

<ul>
<li><p>How are abstract classes and interfaces different?</p></li>
<li><p>What are the differences between runtime exceptions and a checked exception?</p></li>
</ul>


<!--more-->


<p>There were some more questions like this but I don&#8217;t recall all of them.  Next was the programming portion so I was told to hop on Collabedit where the interviewer typed comments describing what the program should do.  I used Java because the interviewers knew it and I&#8217;ve been practicing with it.  The first program was a pretty basic hash problem where I had to write a function that returned the intersection of two input sets.  I mentioned the brute-force O(n<sup>2)</sup> time approach with O(1) space and then decided to use a HashMap&lt;Integer, Boolean> for my implementation for O(n) time and O(n) space.  I initially just used the map&#8217;s value to indicate whether the element was inserted or not allowing for duplicates but later used the value to filter out duplications once the interviewer asked me to.</p>

<p>The second question was to implement a deck of cards along with shuffle() and deal().  Once again a pretty typical question and my answer was pretty standard although I disliked the way I handled the randomization in shuffle().  I realized that repeating rand % 52 until all the empty slots are filled would take forever but my workaround wasn&#8217;t ideal.  Anyways, the interviewer then let me ask some questions about Amazon so we talked about team sizes, interaction, and the people.</p>

<p>The next interviewer covered one of the projects on my resume, followed by some additional quick questions that covered sets, lists, and maps.  He then asked me to write a function that takes in two strings, A &amp; B.  The function then returns a String with the characters of A in the order of B.  An example of this is A: cat, B: tar, sorted: tac.  Notice how &#8216;c&#8217; is not in B so it is just pushed to end of the returned list.  I didn&#8217;t quite finish my implementation during the interview but this is an example of a solution I wrote up afterwards.  I haven&#8217;t tested it thoroughly but it works for simple cases.</p>

<figure class='code'><figcaption><span>SortExample.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sort</span><span class="o">(</span><span class="s">&quot;catt&quot;</span><span class="o">,</span> <span class="s">&quot;tar&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="cm">/* prints &quot;tact&quot; */</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">sort</span><span class="o">(</span><span class="n">String</span> <span class="n">A</span><span class="o">,</span> <span class="n">String</span> <span class="n">B</span><span class="o">){</span>
</span><span class='line'>      <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">hm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">sorted</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="cm">/* Add all the elements in B to the HashMap, initialize value to 0 */</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span> <span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">B</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">()</span> <span class="o">){</span>
</span><span class='line'>          <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="cm">/* Now check a to see if any of these values are also in A */</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span> <span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">A</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">()</span> <span class="o">){</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">)){</span>
</span><span class='line'>              <span class="cm">/* increment key by 1 if both strings contain it */</span>
</span><span class='line'>              <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">B</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">()){</span>
</span><span class='line'>          <span class="cm">/* If the value exists in the Hashmap, it should be in the order exactly as in B */</span>
</span><span class='line'>          
</span><span class='line'>          <span class="cm">/* What if there are repeats? Check to see if we have multiples */</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
</span><span class='line'>              <span class="cm">/* Using concatenation but should use a StringBuilder for better runtime */</span>
</span><span class='line'>              <span class="n">sorted</span> <span class="o">+=</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>              <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">)-</span><span class="mi">1</span><span class="o">);</span> <span class="c1">//subtract 1 from the count</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="cm">/* Otherwise these elements exist in B but not in A so we don&#39;t need them! */</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="cm">/* The last thing to do is append the additional elements in A but not in B to the returned string */</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span> <span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">A</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">()){</span>
</span><span class='line'>          
</span><span class='line'>          <span class="cm">/* Case where the key didn&#39;t exist in B, append it to the end */</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>              <span class="n">sorted</span> <span class="o">+=</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="cm">/* Case where key did exist in A but not all the replicas were in B */</span>
</span><span class='line'>          <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
</span><span class='line'>              <span class="n">sorted</span> <span class="o">+=</span> <span class="n">c</span><span class="o">;</span>
</span><span class='line'>              <span class="n">hm</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">hm</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">)-</span><span class="mi">1</span><span class="o">);</span> <span class="c1">//decrement value in table</span>
</span><span class='line'>              
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sorted</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the interview I was not too happy with my performance but it was a great experience.  To prepare for it I have been reading Cracking the Coding Interview so I will keep going at that and schedule some more interviews for additional practice.  I would definitely recommend the book for anyone who is interested in a Software Engineering position at a major technology company like Amazon, Google or Apple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixins and Duck Typing]]></title>
    <link href="http://jcluck.herokuapp.com//blog/2012/08/13/mixins/"/>
    <updated>2012-08-13T10:16:00-04:00</updated>
    <id>http://jcluck.herokuapp.com//blog/2012/08/13/mixins</id>
    <content type="html"><![CDATA[<p>When learning Ruby, there were a couple of features that really set it apart from other OO Languages (e.g. Java). The first of these features would have to be mixins.  A mixin is a collection of related behaviors that can be added to any class, although in some cases the class may have to fulfill a contract to use the mixin [1].  Mixins are implemented in Ruby using Modules.  A module is just a collection of class and instance methods that contain a framework for classes.  It is important to note that a module itself is not a class.  In other words, you can&#8217;t instantiate a module.  At first this sounds a whole lot like interfaces in Java but there are a couple of differences.  First, let&#8217;s look at an example of using a mixin:</p>

<figure class='code'><figcaption><span>Mixin Example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span> <span class="o">&lt;</span> <span class="n">B</span> <span class="p">;</span> <span class="kp">include</span> <span class="no">MyModule</span> <span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Class A inherits from class B and class A also &#8220;mixes in&#8221; the module, MyModule.  The mixin will literally inline all the instance and class methods defined in MyModule into class A so they will be available once class A is instantiated.  Now how does this work with hierarchical inheritence in terms of priority?  A method call on an intance of class A will: Check class A itself for the method, then check any modules that were mixed-in, and lastly the call will go to class A&#8217;s method_missing handler which by default, punts the call to the superclass which is class B in this scenario.  Using mixins, the need for multiple inheritance is eliminated which allows for simpler code.</p>

<!--more-->


<p>An example of a mixin at work is found within the Array class.  An array mixes in the module Enumerable which lets the Array class respond to methods such as <em>all?</em>, <em>Any?</em>, <em>collect</em>, <em>find</em>, <em>inject</em>, <em>map</em>, etc.  Before Array responds to the Enumerable methods, it must first fulfill the contract defined by the Enumerable documentation.  In this case, it states that Array must provide an <em>each</em> method [2].  Sure enough, in the Array documentation <a href="http://www.ruby-doc.org/core-1.9.3/Array.html#method-i-each">each</a> is defined and we can view the source.</p>

<p>This contract system is nice because only part of the contract needs to be fulfilled if the entire module will not be utilized.  Going back to Enumerable, the documentation states:</p>

<p><em>&#8220;If Enumerable#max, #min, or #sort is used, the objects in the collection must also implement a meaningful &lt;=> operator, as these methods rely on an ordering between members of the collection.&#8221;</em></p>

<p>The &lt;=> operator, or sometimes referred to as the rocketship operator, defines how elements in a collection compare to each other (like compareTo in Java).  The documentation states that unless we want the methods: {<em>#max</em>, <em>#min</em>, or <em>#sort</em>}, &lt;=> can remain undefined in the class which mixes in Enumerable.  The Array class should respond to these methods so it also defines &lt;=>.  By having a flexible contract system, mixins are easy to implement.</p>

<p>Mixins are tied closely to Duck typing.  &#8220;Duck typing is a style of dynamic typing in which an object&#8217;s methods and properties determine the valid semantics, rather than its inheritance from a particular class or implementation of a specific interface&#8221;[3].  The name &#8220;Duck typing&#8221; comes from the idea that if a bird quacks and looks like a druck, it is a duck.  In Ruby an example would be if a class responds to methods like an Array, it is an Array.  Sometimes people refer to this behaviour as &#8220;quacking&#8221; (seriously)  so if something quacks like an ennumerable, we will treat it as such.  I think this really shows the thought process one should have when programming in Ruby.  Classes are not defined by what they inherit, but by what they respond to.  The code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">foo</span>
</span></code></pre></td></tr></table></div></figure>


<p>  should be read as &#8220;call method foo on object a&#8221; where object a is the receiver.  Since classes are defined by the methods they respond to, mixins go well with duck typing.</p>

<p>[1]: <a href="http://beta.saasbook.info/">Engineering Long-Lasting Software: An Agile Approach Using SaaS and Cloud Computing (Alpha Edition)</a>   <br/>
[2]: <a href="http://ruby-doc.org/core-1.9.3/Enumerable.html">Enumerable Class Definition</a> <br/>
[3]: <a href="http://en.wikipedia.org/wiki/Duck_typing">Duck Typing</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World - Initial Commit]]></title>
    <link href="http://jcluck.herokuapp.com//blog/2012/08/10/test-post/"/>
    <updated>2012-08-10T11:20:00-04:00</updated>
    <id>http://jcluck.herokuapp.com//blog/2012/08/10/test-post</id>
    <content type="html"><![CDATA[<h2>Initial Thoughts</h2>

<p>This blog is finally up and running - although it is far from where I want it!  I used <a href="http://octopress.org/">Octopress</a> to generate the blog and it was really easy to configure using the provided YAML config files. Part of the reason I tried Octopress was to not code the HTML from scratch and it seems to be doing the job.  It seems very similar to WordPress but I haven&#8217;t really used either extensively. Compared to web-based blogging alternatives like Tumblr, Octopress and Jekyll get a big +1 for letting me use <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> and <a href="http://www.sublimetext.com/">Sublime Text 2</a>.</p>

<!-- more -->


<h2>Deployment</h2>

<p>I have been using <a href="http://www.heroku.com/">Heroku</a> for over a month now to deploy Ruby/Rails web apps.  Heroku is a service for launching web apps using a cloud application platform.  It simplifies deployment, works well with git, and scales very nicely using &#8220;Dynos&#8221;.  Heroku utilizes the PostgreSQL database for apps in the production environment.  Of course, this database has all the common problems any SQL database seems to run into.  One of the creators of Heroku, Adam Wiggins, commented on database scaling:</p>

<p>  <em>&#8220;A question I’m often asked about Heroku is: “How do you scale the SQL database?” There’s a lot of things I can say about using caching, sharding, and other techniques to take load off the database. But the actual answer is: we don’t. SQL databases are fundamentally non-scalable, and there is no magical pixie dust that we, or anyone, can sprinkle on them to suddenly make them scale.&#8221;</em></p>

<p>The weakest link of a SaaS app always seems to the persistance layer and unfortunately, Heroku will not provide an answer for that.</p>

<h2>Future Work</h2>

<p>I plan on spending the rest of my summer focusing on Rails and the <a href="https://www.coursera.org/course/saas">SaaS course at UC Berkeley</a>.  I hope this blog will be able to help others who are also trying to learn more about SaaS developement.  In addition to publishing more content, I plan to update the CSS, and configure a custom DNS.  The updated code should be available on my <a href="https://github.com/jasoncluck">GitHub</a> in the blog repository. Let me know if you have any ideas or questions!</p>

<p>-Jason</p>
]]></content>
  </entry>
  
</feed>
