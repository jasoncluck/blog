<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Jason Cluck]]></title>
  <link href="http://jcluck.herokuapp.com//blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jcluck.herokuapp.com//"/>
  <updated>2012-08-13T17:53:49-04:00</updated>
  <id>http://jcluck.herokuapp.com//</id>
  <author>
    <name><![CDATA[Jason Cluck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mixins and Duck Typing]]></title>
    <link href="http://jcluck.herokuapp.com//blog/2012/08/13/mixins/"/>
    <updated>2012-08-13T10:16:00-04:00</updated>
    <id>http://jcluck.herokuapp.com//blog/2012/08/13/mixins</id>
    <content type="html"><![CDATA[<p>When learning Ruby, there were a couple of features that really set it apart from other OO Languages (e.g.: Java).  The first of these features would have to be mixins.  A mixin is a collection of related behaviors that can be added to any class, although in some cases the class may have to fulfill a contract to use the mixin [1].  Mixins are implemented in Ruby using Modules.  A module is just a collection of class and instance methods that contain a framework for classes.  It is important to note that a module itself is not a class.  In other words, you can't instantiate a module.  At first this sounds a whole lot like interfaces in Java but there are a couple of differences.  First, let's look at an example of using a mixin:</p>

<p><code>ruby Mixin Example
class A &lt; B ; include MyModule ; end
</code></p>

<p>So class A inherits from class B and class A also "mixes in" the module, MyModule.  The mixin will literally inline all the instance and class methods defined in MyModule into class A so they will be available once class A is instantiated.  Now how does this work with hierarchical inheritence in terms of priority?  A method call on an intance of class A will: Check class A itself for the method, then check any modules that were mixed-in, and lastly the call will go to class A's method_missing handler which by default, punts the call to the superclass which is class B in this scenario.  Using mixins, the need for multiple inheritance is eliminated which allows for simpler code.</p>

<p>An example of a mixin at work is found within the Array class.  An array mixes in the module Enumerable which lets the Array class respond to methods such as <em>all?</em>, <em>Any?</em>, <em>collect</em>, <em>find</em>, <em>inject</em>, <em>map</em> etc.  Before Array responds to the Enumerable methods, it must first fulfill the contract defined by the Enumerable documentation.  In this case, it states that Array must provide an <em>each</em> method [2].  Sure enough, in the Array documentation <a href="http://www.ruby-doc.org/core-1.9.3/Array.html#method-i-each">each</a> is defined and we can view the source.</p>

<p>This contract system is nice because only part of the contract needs to be fulfilled if the entire module will not be utilized.  Going back to Enumerable, the documentation states:</p>

<p><em>"If Enumerable#max, #min, or #sort is used, the objects in the collection must also implement a meaningful &lt;=> operator, as these methods rely on an ordering between members of the collection."</em></p>

<p>The &lt;=> operator, or sometimes referred to as the rocketship operator, defines how elements in a collection compare to each other (like compareTo in Java).  The documentation states that unless we want the methods: {<em>#max</em>, <em>#min</em>, or <em>#sort</em>}, &lt;=> can remain undefined in the class which mixes in Enumerable.  The Array class should respond to these methods so it also defines &lt;=>.  By having a flexible contract system, mixins are easy to implement.</p>

<p>Mixins are tied closely to Duck typing.  "Duck typing is a style of dynamic typing in which an object's methods and properties determine the valid semantics, rather than its inheritance from a particular class or implementation of a specific interface"[3].  The name "Duck typing" comes from the idea that if a bird quacks like a duck, looks like a duck, it is a duck.  In Ruby an example would be if a class responds to methods like an Array, it is an Array.  Sometimes people refer to this behaviour as "quacking" (seriously)  so if something quacks like an ennumerable, we will treat it as such.  I think this really shows the thought process one should have when programming in Ruby.  Classes are not defined by what they inherit, but by what they respond to.  The code:
<code>ruby
a.foo
</code></p>

<p>  should be read as "call method foo on object a" where object a is the receiver.  Since classes are defined by the methods they respond to, mixins go well with duck typing.</p>

<p>[1]: <a href="http://beta.saasbook.info/">Engineering Long-Lasting Software: An Agile Approach Using SaaS and Cloud Computing (Alpha Edition)</a>   <br/>
[2]: <a href="http://ruby-doc.org/core-1.9.3/Enumerable.html">Enumerable Class Definition</a> <br/>
[3]: <a href="http://en.wikipedia.org/wiki/Duck_typing">Duck Typing</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World - Initial Commit]]></title>
    <link href="http://jcluck.herokuapp.com//blog/2012/08/10/test-post/"/>
    <updated>2012-08-10T11:20:00-04:00</updated>
    <id>http://jcluck.herokuapp.com//blog/2012/08/10/test-post</id>
    <content type="html"><![CDATA[<h2>Initial Thoughts</h2>

<p>This blog is finally up and running - although it is far from where I want it!  I used <a href="http://octopress.org/">Octopress</a> to generate the blog and it was really easy to configure using the provided YAML config files. Part of the reason I tried Octopress was to not code the HTML from scratch and it seems to be doing the job.  It seems very similar to WordPress but I haven't really used either extensively. Compared to web-based blogging alternatives like Tumblr, Octopress and Jekyll get a big +1 for letting me use <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> and <a href="http://www.sublimetext.com/">Sublime Text 2</a>.</p>

<h2>Deployment</h2>

<p>I have been using <a href="http://www.heroku.com/">Heroku</a> for over a month now to deploy Ruby/Rails web apps.  Heroku is a service for launching web apps using a cloud application platform.  It simplifies deployment, works well with git, and scales very nicely using "Dynos".  Heroku utilizes the PostgreSQL database for apps in the production environment.  Of course, this database has all the common problems any SQL database seems to run into.  One of the creators of Heroku, Adam Wiggins, commented on database scaling:</p>

<p>  <em>"A question I’m often asked about Heroku is: “How do you scale the SQL database?” There’s a lot of things I can say about using caching, sharding, and other techniques to take load off the database. But the actual answer is: we don’t. SQL databases are fundamentally non-scalable, and there is no magical pixie dust that we, or anyone, can sprinkle on them to suddenly make them scale."</em></p>

<p>The weakest link of a SaaS app always seems to the persistance layer and unfortunately, Heroku will not provide an answer for that.</p>

<h2>Future Work</h2>

<p>I plan on spending the rest of my summer focusing on Rails and the <a href="https://www.coursera.org/course/saas">SaaS course at UC Berkeley</a>.  I hope this blog will be able to help others who are also trying to learn more about SaaS developement.  In addition to publishing more content, I plan to update the CSS, and configure a custom DNS.  The updated code should be available on my <a href="https://github.com/jasoncluck">GitHub</a> in the blog repository. Let me know if you have any ideas or questions!</p>

<p>-Jason</p>
]]></content>
  </entry>
  
</feed>
