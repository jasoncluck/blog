<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Interviews | Jason Cluck]]></title>
  <link href="http://jcluck.herokuapp.com//blog/categories/interviews/atom.xml" rel="self"/>
  <link href="http://jcluck.herokuapp.com//"/>
  <updated>2013-01-31T15:10:44-05:00</updated>
  <id>http://jcluck.herokuapp.com//</id>
  <author>
    <name><![CDATA[Jason Cluck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Amazon - third interview and offer]]></title>
    <link href="http://jcluck.herokuapp.com//blog/2013/01/30/amazon-third-interview-and-offer/"/>
    <updated>2013-01-30T10:08:00-05:00</updated>
    <id>http://jcluck.herokuapp.com//blog/2013/01/30/amazon-third-interview-and-offer</id>
    <content type="html"><![CDATA[<p>I was notified a few days after the first two Amazon interviews that they wanted to have a third interview.  They had to reschedule once due to a timing conflict but I had the third interview last Thursday (1/24).  The agenda was the same as the other interviews and began with questions about a Rails project I've done recently.  Next was some questions about binary search trees (glad I studied those).  I was able to answer these questions and figured out the number of leaf nodes and total nodes in a complete BST of height <strong>h</strong> by writing out an example.</p>

<!--more-->


<p>The programming portion was next and I got on collabedit again.  The first question was to write a function to tell if two strings are anagrams of each other.  I knew this one! I actually reviewed the solutions the day before so I told the interviewer it was a familiar problem and he had me solve it anyways.  I mentioned three solutions:</p>

<ol>
<li><p>Sort the strings using a basic sort such as quicksort to avoid using additional space - O(nlogn) time.  If the sorted strings are the same they are anagrams.</p></li>
<li><p>Allocate an array that is the size of the total possible characters in the character set (ASCII or Unicode).  For the first string, increment the characters location in the array every time it is seen, then decrement it for the second string.  Check to see if the array is zeroed out and if so, its an anagram. This is similiar to counting sort.</p></li>
<li><p>If we constrict the requirements to only allowing unique lowercase ASCII characters it becomes more feasible to do a bitwise solution.  Using an 32-bit int, we can bit shift over by that character's value (subtract 'a' from character to get bits 0-25).  Then flip the bits back if the second string also has any of the bits from the first string.  At the end just check to see if the int is equal to 0 and the result is an anagram.</p></li>
</ol>


<p>I implemented version 2. of the anagram code with ASCII in Java and then he asked me another problem.  Given a value k, what is a good approach for returning the max k values from an unsorted array.  So if k=1 we return the max, k=2 we return the max and the second max etc.  I thought about this by starting with k=1.  It will take at least O(n) time to return just 1, but as k grows the compute time will grow rapidly.  I started thinking of data structures to use beginning with a BST (probably because it was fresh in my mind).  This would work because the elements are sorted but the tree traversals would get ugly and complicated.  I then decided on using a max-heap because it takes n time to assemble and can easily reorganize to provide the next element.</p>

<p>I asked some questions about Amazon and then the interview was over.  After much anticipation I received an offer yesterday and spoke with a recruiter about all the details.  I have already accepted so I will moving to Seattle for the summer.  The team I will be working on is called eCPS which focuses on scalability and reliable with web services.  The website has more details <a href="" title="http://ecps.amazon.com/">here</a>.</p>

<p>Some lessons that I learned:</p>

<ul>
<li><p>Practice programming problems! Tons of these on StackOverflow, Careercup, Glassdoor etc.</p></li>
<li><p>Take Steve Yegge's advice and warm up the day of.  Do some really common interview problems like recursive tree traversals, hash tables, and string manipulation.</p></li>
<li><p>Tell the interviewers if you've solved the problem before! People want honest teammates.</p></li>
<li><p>Work on programming projects in your free time.  I'm pretty sure I only got an interview because I taught myself Rails and wrote some projects with it for fun.</p></li>
</ul>


<p>Anyways, I hope this helps someone else with getting the job they want!  I'd be glad to answer any questions via email: jcluck@gwmail.gwu.edu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon Interview]]></title>
    <link href="http://jcluck.herokuapp.com//blog/2013/01/10/amazon/"/>
    <updated>2013-01-10T15:23:00-05:00</updated>
    <id>http://jcluck.herokuapp.com//blog/2013/01/10/amazon</id>
    <content type="html"><![CDATA[<p>Today I had my phone interviews with Amazon for the Software Engineering Intern position in Seattle.  This was my first "real" technical interview and consisted of two 45 minute sessions.  Both interviewers were very nice and they didn't waste any time getting to the technical questions. It began with simple OO questions such as:</p>

<ul>
<li><p>How are abstract classes and interfaces different?</p></li>
<li><p>What are the differences between runtime exceptions and a checked exception?</p></li>
</ul>


<!--more-->


<p>There were some more questions like this but I don't recall all of them.  Next was the programming portion so I was told to hop on Collabedit where the interviewer typed comments describing what the program should do.  I used Java because the interviewers knew it and I've been practicing with it.  The first program was a pretty basic hash problem where I had to write a function that returned the intersection of two input sets.  I mentioned the brute-force O(n<sup>2)</sup> time approach with O(1) space and then decided to use a HashMap&lt;Integer, Boolean> for my implementation for O(n) time and O(n) space.  I initially just used the map's value to indicate whether the element was inserted or not allowing for duplicates but later used the value to filter out duplications once the interviewer asked me to.</p>

<p>The second question was to implement a deck of cards along with shuffle() and deal().  Once again a pretty typical question and my answer was pretty standard although I disliked the way I handled the randomization in shuffle().  I realized that repeating rand % 52 until all the empty slots are filled would take forever but my workaround wasn't ideal.  Anyways, the interviewer then let me ask some questions about Amazon so we talked about team sizes, interaction, and the people.</p>

<p>The next interviewer covered one of the projects on my resume, followed by some additional quick questions that covered sets, lists, and maps.  He then asked me to write a function that takes in two strings, A &amp; B.  The function then returns a String with the characters of A in the order of B.  An example of this is A: cat, B: tar, sorted: tac.  Notice how 'c' is not in B so it is just pushed to end of the returned list.  I didn't quite finish my implementation during the interview but this is an example of a solution I wrote up afterwards.  I haven't tested it thoroughly but it works for simple cases.</p>

<p>``` java SortExample.java
public static void main(String[] args) {</p>

<pre><code>    System.out.println(sort("catt", "tar"));
    /* prints "tact" */
}


public static String sort(String A, String B){
    HashMap&lt;Character, Integer&gt; hm = new HashMap&lt;Character, Integer&gt;();
    String sorted = "";

    /* Add all the elements in B to the HashMap, initialize value to 0 */
    for( char c : B.toCharArray() ){
        hm.put(c, 0);
    }

    /* Now check a to see if any of these values are also in A */
    for( char c : A.toCharArray() ){
        if(hm.containsKey(c)){
            /* increment key by 1 if both strings contain it */
            hm.put(c, hm.get(c) + 1); 
        }
    }

    for(char c : B.toCharArray()){
        /* If the value exists in the Hashmap, it should be in the order exactly as in B */

        /* What if there are repeats? Check to see if we have multiples */
        if(hm.get(c) &gt; 0){
            /* Using concatenation but should use a StringBuilder for better runtime */
            sorted += c;
            hm.put(c, hm.get(c)-1); //subtract 1 from the count
        }
        /* Otherwise these elements exist in B but not in A so we don't need them! */
    }

    /* The last thing to do is append the additional elements in A but not in B to the returned string */
    for( char c : A.toCharArray()){

        /* Case where the key didn't exist in B, append it to the end */
        if(hm.get(c) == null){
            sorted += c;
        }

        /* Case where key did exist in A but not all the replicas were in B */
        else if(hm.get(c) &gt; 0){
            sorted += c;
            hm.put(c, hm.get(c)-1); //decrement value in table

        }
    }
    return sorted;
}
</code></pre>

<p>```</p>

<p>After the interview I was not too happy with my performance but it was a great experience.  To prepare for it I have been reading Cracking the Coding Interview so I will keep going at that and schedule some more interviews for additional practice.  I would definitely recommend the book for anyone who is interested in a Software Engineering position at a major technology company like Amazon, Google or Apple.</p>
]]></content>
  </entry>
  
</feed>
