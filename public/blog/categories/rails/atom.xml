<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Jason Cluck]]></title>
  <link href="http://jcluck.herokuapp.com//blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://jcluck.herokuapp.com//"/>
  <updated>2013-03-08T11:21:48-05:00</updated>
  <id>http://jcluck.herokuapp.com//</id>
  <author>
    <name><![CDATA[Jason Cluck]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby: Using splats with functions]]></title>
    <link href="http://jcluck.herokuapp.com//blog/2013/03/08/ruby-overview-of-function-arguments-and-whats-new-in-2-dot-0/"/>
    <updated>2013-03-08T01:05:00-05:00</updated>
    <id>http://jcluck.herokuapp.com//blog/2013/03/08/ruby-overview-of-function-arguments-and-whats-new-in-2-dot-0</id>
    <content type="html"><![CDATA[<p>Splats in Ruby can make your life easier.  The first example of this is to use a splat (asterisk in Ruby) to pass in an entire list to a function. Keep in mind that in Ruby a list can be pretty much anything.</p>

<p>``` ruby asteriskExample.rb
def convert_to_list(*list)</p>

<pre><code>puts list.inspect
#output["1", "a", "2", "b", ["foo", "bar", "1"], "alice", "bob"]
</code></pre>

<p>end
convert_to_list('1', 'a', '2', 'b', ['foo', 'bar', '1'], 'alice', 'bob')
```</p>

<!--more-->


<p>This can also be paired with Rails methods, such as extract_options!, to make some interesting functions.  This one takes in a list and extracts the last hash that's passed in.  Othewise an empty hash is returned.  This could be utilized when passing params from the view to the controller. Notice the bang indicates that we are removing the hash entry from the passed in list.  This example also shows a splat splits up the remaining list arguments if there is some parameter before it such as first_num in this case.</p>

<p>``` ruby hashExample.rb
def get_options(first_num, *args)</p>

<pre><code>puts first_num.inspect  # =&gt; "1"
args.extract_options!   # =&gt; {:a=&gt;:x}
</code></pre>

<p>end
get_options('1', 'a', '2', :a => :x, :b => :y)
```</p>

<p>If we were to switch out the ordering of first_num and *args we could replicate the behavior of extract_options.  Splats can also be used to call a function with each item in a list.</p>

<p><code>ruby splatArgument.rb
animals = ["cats", "dogs", "werewolves"]
my_function(*animals)
</code></p>

<p>Lastly, a double splat (**) can be used to capture every keyword argument.  From what I've seen in Ruby 2.0.0 these are used for the last argument to capture all of the keywords if a default is not specified.  I'll talk more about this is later posts since I just upgraded to 2.0.0 myself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World - Initial Commit]]></title>
    <link href="http://jcluck.herokuapp.com//blog/2012/08/10/test-post/"/>
    <updated>2012-08-10T11:20:00-04:00</updated>
    <id>http://jcluck.herokuapp.com//blog/2012/08/10/test-post</id>
    <content type="html"><![CDATA[<h2>Initial Thoughts</h2>

<p>This blog is finally up and running - although it is far from where I want it!  I used <a href="http://octopress.org/">Octopress</a> to generate the blog and it was really easy to configure using the provided YAML config files. Part of the reason I tried Octopress was to not code the HTML from scratch and it seems to be doing the job.  It seems very similar to WordPress but I haven't really used either extensively. Compared to web-based blogging alternatives like Tumblr, Octopress and Jekyll get a big +1 for letting me use <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> and <a href="http://www.sublimetext.com/">Sublime Text 2</a>.</p>

<!-- more -->


<h2>Deployment</h2>

<p>I have been using <a href="http://www.heroku.com/">Heroku</a> for over a month now to deploy Ruby/Rails web apps.  Heroku is a service for launching web apps using a cloud application platform.  It simplifies deployment, works well with git, and scales very nicely using "Dynos".  Heroku utilizes the PostgreSQL database for apps in the production environment.  Of course, this database has all the common problems any SQL database seems to run into.  One of the creators of Heroku, Adam Wiggins, commented on database scaling:</p>

<p>  <em>"A question I’m often asked about Heroku is: “How do you scale the SQL database?” There’s a lot of things I can say about using caching, sharding, and other techniques to take load off the database. But the actual answer is: we don’t. SQL databases are fundamentally non-scalable, and there is no magical pixie dust that we, or anyone, can sprinkle on them to suddenly make them scale."</em></p>

<p>The weakest link of a SaaS app always seems to the persistance layer and unfortunately, Heroku will not provide an answer for that.</p>

<h2>Future Work</h2>

<p>I plan on spending the rest of my summer focusing on Rails and the <a href="https://www.coursera.org/course/saas">SaaS course at UC Berkeley</a>.  I hope this blog will be able to help others who are also trying to learn more about SaaS developement.  In addition to publishing more content, I plan to update the CSS, and configure a custom DNS.  The updated code should be available on my <a href="https://github.com/jasoncluck">GitHub</a> in the blog repository. Let me know if you have any ideas or questions!</p>

<p>-Jason</p>
]]></content>
  </entry>
  
</feed>
