---
layout: post
title: "Amazon Interview"
date: 2013-01-10 15:23
comments: true
categories: Amazon, Interviews
---

Today I had my interview with Amazon for the Software Engineering Intern position in Seattle.  This was my first "real" techincal interview and consisted of two 45 minute sessions.  Both interviewers were very nice and the first one didn't waste any time with getting to the technical questions. It began with simple OO questions such as: 
* How are abstract classes and interfaces different?
* What are the differences between runtime exceptions and a checked exception.
<!--more-->
There were some more but I don't recall all of them.  Next was the actually programming portion so I was told to hop on collabedit where the interviewer typed comments describing what the program should do.  The first program was a pretty basic set problem where I had to write a function that returned the intersection two input sets.  I mentioned the brute-force O(n^2) time approach with O(1) space and then decided to use a HashMap<Integer, Boolean> for my implementation.  I initially just used the map's value to indicate whether the element was inserted or not allowing for duplicates but later used the value to filter out duplications once the interviewer asked me to.

The second question was to implement a deck of cards along with shuffle() and deal().  Once again a pretty typical question and my answer was pretty standard although I disliked the way I handled the randomization in shuffle().  I realized that repeating rand % 52 until all the empty slots are filled would take forever but my workaround wasn't ideal.  Anyways, the interviewer then let me ask some questions about Amazon so we talked about team sizes, interaction, and the people.

The next interviewer covered one of the projects on my resume, followed by some more quick questions that covered sets, lists, and maps.  He then asked me to write a function that takes in two strings, A & B.  The function then returns a String with the characters of A in the order of B.  An example of this is A: cat, B: tar, sorted: tac.  Notice how 'c' is not in B so it just pushed to end of the returned list.


``` java Sort Example
public static void main(String[] args) {
		System.out.println(sort("catt", "tar"));
		/* prints "tact" */
	}
	
	
	public static String sort(String A, String B){
		HashMap<Character, Integer> hm = new HashMap<Character, Integer>();
		String sorted = "";
		
		/* Add all the elements in B to the HashMap, initialize value to 0 */
		for( char c : B.toCharArray() ){
			hm.put(c, 0);
		}
		
		/* Now check a to see if any of these values are also in A */
		for( char c : A.toCharArray() ){
			if(hm.containsKey(c)){
				/* increment key by 1 if both strings contain it */
				hm.put(c, hm.get(c) + 1); 
			}
		}
		
		for(char c : B.toCharArray()){
			/* If the value exists in the Hashmap, it should be in the order exactly as in B */
			
			/* What if there are repeats? Check to see if we have multiples */
			if(hm.get(c) > 0){
				/* Using concatenation but should use a StringBuilder for better runtime */
				sorted += c;
				hm.put(c, hm.get(c)-1); //subtract 1 from the count
			}
			/* Otherwise these elements exist in B but not in A so we don't need them! */
		}
		
		/* The last thing to do is append the additional elements in A but not in B to the returned string */
		for( char c : A.toCharArray()){
			
			/* Case where the key didn't exist in b, append it to the end */
			if(hm.get(c) == null){
				sorted += c;
			}
			
			/* Case where key did exist in b but not all the replicas were in B */
			else if(hm.get(c) > 0){
				sorted += c;
				hm.put(c, hm.get(c)-1); //decrement value in table
				
			}
		}
		return sorted;
	}
```
